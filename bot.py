"""! @brief Bot discord pour un serveur communautaire BrawlHalla
 @file bot.py
 @section libs Librairies/Modules
  - discord
  - json
  - os

 @section authors Auteur(s)
  - Cr√©√© par Matthias HARTMANN le 31/03/2022 .
"""
import discord as dis
from player import Player, Team, brawlhallaAPI
from json import dump
import os


"""
Gestion de token dans un fichier "apikey.txt"
en premier on trouve la cl√© de l'api brawlhalla puis un espace et le token du bot discord
"""
token : str = ""
with open('./apikey.txt', 'r') as f:
    tokens : list = f.readline().split(" ")
    print(tokens)
    brawlhallaAPI.api_key = tokens[0];
    token = tokens[1]


#On initialise le client (bot) afin de lui assigner des events
client = dis.Client()

#On initialise la gestion des Teams (afin de pouvoir l'utiliser avec le bot)
Team.init()

async def userIdToNames(users : list) -> list:
    """!
    @brief Cette fonction permet d'obtenir une liste de nom d'utilisateur discord √† partir d'une liste d'id

    Param√®tres : 
        @param users : list => liste d'id discord
    Retour de la fonction : 
        @return list => liste de nom discord

    """
    names = ""
    for u in users:
        user = await client.fetch_user(u)
        names += "- "+user.name + "\n"
    return names

@client.event
async def on_message(message : dis.Message):
    """!
    @brief Cette fonction permet au bot de lire les messages discord sur un channel et d'y r√©pondre en fonction de leur contenu

    Param√®tres : 
        @param message : dis.Message => l'objet message associ√© au message qui a provoqu√© l'event

    """

    #On r√©cup√®re le contenu du message qu'on transforme en liste de str (lowercase) pour pouvoir traiter si le message est une commande ou non
    full_command = [i.lower() for i in message.content.split(" ")]

    #On v√©rifie si le message commence par "!b"  et qu'il poss√®de au moins deux mots sinon on ne traite pas le message.
    if(full_command[0] != "!b" or len(full_command) < 2):
        return
    
    #On r√©cupp√®re l'auteur du message
    author = message.author

    #On d√©termine la command c'est √† dire le premier mot apr√®s "!b"
    command = full_command[1]

    #On pr√©pare une variable player qui sera utilis√© dans la fonction
    player : Player or None = None

    #Le cas ou la commande concerne les legends du joueurs (obtenir une legend al√©atoire, obtenir un challenge, connaitre la liste des legends restantes)
    if command == "legend":
        if len(full_command) > 2:
            #On regarde le param√®tre de la commande legend

            #Si c'est rdm alors on tire al√©atoirement une legend dans la liste du joueur
            if full_command[2] == "rdm":
                legend = "B√∂dvar"
                if author.id in Player.players:
                    player = Player.get(author.id)
                else:
                    player = Player(author.id)
                legend = player.random()
                
                await message.channel.send(f"Utilise : {legend}")

            #Si c'est list alors on affiche la liste des legends qu'il reste
            elif full_command[2] == "list":
                legend = []
                if author.id in Player.players:
                    player = Player.get(author.id)
                else:
                    player = Player(author.id)
                legend = player.rest()
                
                await message.channel.send(f"Tu n'as pas encore utilis√© les legendes suivantes: {legend}({len(player.legends)})")
            
            #Si c'est weapon alors on affiche un challenge al√©atoire
            elif full_command[2] == "weapon":
                author = message.author
                await message.channel.send(f"Arme(s) √† utiliser : {Player.weapon()}")

            await message.delete()
    #Le cas o√π la commande concerne le joueur et ses statistiques 
    elif command == "player":
        if len(full_command) > 3:
            #Si le param√®tre est steam alors on essaye de lier l'id steam entr√© en param√®tre avec l'objet joueur
            if(full_command[2] == "steam"):
                author = message.author
                if author.id in Player.players:
                    player : Player = Player.get(author.id)
                else:
                    player = Player(author.id)
                player.setSteamID(full_command[3])
                
                if(player.brawlhalla_id != None):
                    await message.channel.send(f"Votre compte steam a bien √©t√© li√©.")
                else:
                    await message.channel.send(f"Votre compte steam n'a pas pu √™tre li√©.")

                await message.delete()

        elif len(full_command) > 2:

            """
            TODO:
                Afficher les statistiques d'une autre fa√ßon
                Envoyer les statistiques en message priv√©
            """

            #Dans le cas des statistiques basiques du joueur
            if(full_command[2] == "stats"):
                player : Player or None = None
                if author.id in Player.players:
                    player = Player.get(author.id)
                else:
                    player = Player(author.id)
                if(player != None and player.isConnected()):
                    with open('./stats.json', 'w') as f:
                        dump(brawlhallaAPI.getPlayerStats(player.brawlhalla_id), f)
                    await message.channel.send("Voici vos statistiques", file=dis.File(r'./stats.json'))
                    os.remove("./stats.json")
                else:
                    await message.channel.send("Votre compte steam n'a pas √©t√© reli√©. Vous ne pouvez donc pas obtenir vos statistiques")

            #Dans le cas des statistiques de Ranked du joueur
            if(full_command[2] == "ranked"):
                player : Player or None = None
                if author.id in Player.players:
                    player = Player.get(author.id)
                else:
                    player = Player(author.id)
                if(player != None and player.isConnected()):
                    with open('./ranked.json', 'w') as f:
                        dump(brawlhallaAPI.getPlayerRanked(player.brawlhalla_id), f)
                    await message.channel.send("Voici vos statistiques", file=dis.File(r'./ranked.json'))
                    os.remove("./ranked.json")
                else:
                    await message.channel.send("Votre compte steam n'a pas √©t√© reli√©. Vous ne pouvez donc pas obtenir vos statistiques")
        

    #Si la commande concerne les teams
    elif command == "teams":
        if len(full_command) > 2:
            #Pour cr√©er une nouvelle partie
            if full_command[2] == "new":
                channel = message.channel
                answer = await channel.send(f'Veuillez cliquer sur la reaction pour participer.')
                await answer.add_reaction("üïπ")
                Team.teamReaction = answer.id
            #Pour lister les participants en attente de la partie
            elif full_command[2] == "list":
                p = Team.participants()
                names = await userIdToNames(p)
                await message.channel.send(f"Les participants sont: \n{names}")
            #Pour selectionner les √©quipes al√©atoires
            elif full_command[2] == "select":
                Team.selection()
                Rednames = await userIdToNames(Team.teamRed.players)
                await message.channel.send(f"Les Rouges sont: \n{Rednames}")

                BlueNames = await userIdToNames(Team.teamBlue.players)
                await message.channel.send(f"Les Bleus sont: \n{BlueNames}")
            #Pour remettre √† 0 la partie
            elif full_command[2] == "reset":
                Team.init()
                await message.channel.send(f"La pr√©paration des teams a √©t√© r√©initialis√©e.")
            await message.delete()
    #Pour afficher la liste de commande et comment les utiliser
    elif command == "help":
        """
        TODO:
            Afficher la liste des commandes
            Afficher l'utilisation des commandes
        """
        pass

@client.event
async def on_reaction_add(reaction: dis.reaction, user:dis.user):
    """!
    @brief Cette fonction permet au bot d'ajouter un joueur √† la partie en cours 

    Param√®tres : 
        @param reaction : dis.reaction => La r√©action ajout√© par l'utilisateur discord
        @param user : dis.user => l'utilisateur discord

    """
    if not user.bot and reaction.message.id == Team.teamReaction:
        Team.teamWaiter.add(user.id)
        await reaction.message.channel.send(f'{user.name} a rejoint la partie.')

@client.event
async def on_raw_reaction_remove(payload : dis.raw_models.RawReactionActionEvent):
    """!
    @brief Cette fonction permet au bot de retirer un joueur de la partie lors que celui-ci retire sa r√©action

    Param√®tres : 
        @param payload : dis.raw_models.RawReactionActionEvent => l'event g√©n√©r√© par l'utilisateur

    """
    if payload.message_id == Team.teamReaction:
        Team.teamWaiter.remove(payload.user_id)
        user = await client.fetch_user(payload.user_id)
        await client.get_channel(payload.channel_id).send(f'{user.name} a quitt√© la partie.')

#Au lancement du bot on met √† jour la liste statiques des legends
Player.legends = brawlhallaAPI.getAllLegends()

#On lance le bot
client.run(token)